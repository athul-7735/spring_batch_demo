name: cluster-setup
on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Create namespaces
        run: |
          kubectl create namespace batch --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace cicd --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply namespace-scoped RBAC
        working-directory: ./initial
        run: kubectl apply -f rbac.yaml

      - name: Add Helm repos
        run: |
          helm repo add falcosecurity https://falcosecurity.github.io/charts
          helm repo add kyverno https://kyverno.github.io/kyverno/
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Install Falco
        run: |
          helm upgrade --install falco -n falco falcosecurity/falco \
            --set falcosidekick.enabled=true \
            --set falcosidekick.webui.enabled=true \
            --create-namespace \
            --wait

      - name: Install Kyverno
        working-directory: ./initial
        run: |
          kubectl apply -f https://github.com/kyverno/kyverno/releases/download/v1.11.1/install.yaml --server-side --force-conflicts
      
      - name: Wait for Kyverno to be ready
        run: |
          echo "Waiting for Kyverno pods to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/part-of=kyverno --namespace kyverno --timeout=120s

      - name: Create ECR pull secret for Kyverno
        run: |
          ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)
          kubectl create secret docker-registry ecr-creds \
            --docker-server=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com \
            --docker-username=AWS \
            --docker-password="$ECR_PASSWORD" \
            -n kyverno \
            --dry-run=client -o yaml | kubectl apply -f -


      - name: Patch Kyverno admission controller for ECR auth
        run: |
          kubectl patch deploy kyverno-admission-controller -n kyverno \
            --type=json \
            -p='[{"op": "add", "path": "/spec/template/spec/imagePullSecrets", "value": [{"name": "ecr-creds"}]}]'

      - name: Patch Kyverno background controller for ECR auth
        run: |
          kubectl patch deploy kyverno-background-controller -n kyverno \
            --type=json \
            -p='[{"op": "add", "path": "/spec/template/spec/imagePullSecrets", "value": [{"name": "ecr-creds"}]}]'

      - name: Restart Kyverno pods
        run: |
          kubectl rollout restart deploy -n kyverno kyverno-admission-controller
          kubectl rollout restart deploy -n kyverno kyverno-background-controller

      - name: Install Prometheus + Pushgateway + Grafana
        run: |
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

          helm upgrade --install pg prometheus-community/prometheus-pushgateway \
            -n monitoring \
            --wait

          helm upgrade --install prometheus prometheus-community/prometheus \
            -n monitoring \
            --set-string server.extraScrapeConfigs[0].job_name=pushgateway \
            --set-string server.extraScrapeConfigs[0].static_configs[0].targets[0]=pg-prometheus-pushgateway.monitoring.svc:9091 \
            --wait

          helm upgrade --install grafana grafana/grafana \
            -n monitoring \
            --set service.type=ClusterIP \
            --set adminPassword=admin \
            --wait
