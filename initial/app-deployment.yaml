#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: demo-app-spring
#  labels:
#    app: demo-app-spring
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: demo-app-spring
#  template:
#    metadata:
#      labels:
#        app: demo-app-spring
#    spec:
#      containers:
#        - name: demo-app-spring
#          image: 557690581666.dkr.ecr.eu-west-1.amazonaws.com/spring-batch-eks:latest
#          imagePullPolicy: IfNotPresent
#          ports:
#            - name: http
#              containerPort: 8080
#          resources:
#            limits:
#              cpu: 0.2
#              memory: "200Mi"
#          env:
#            - name: DB_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: mysql-pass
#                  key: mysql-user-password
#            - name: DB_SERVER
#              valueFrom:
#                configMapKeyRef:
#                  name:  mysql-config-map
#                  key: mysql-server
#            - name: DB_NAME
#              valueFrom:
#                configMapKeyRef:
#                  name:  mysql-config-map
#                  key: mysql-database-name
#            - name: DB_USERNAME
#              valueFrom:
#                configMapKeyRef:
#                  name: mysql-config-map
#                  key: mysql-user-username
#
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: demo-app-spring
#  labels:
#    app: demo-app-spring
#spec:
#  type: LoadBalancer
#  selector:
#    app: demo-app-spring
#  ports:
#    - protocol: TCP
#      name: http
#      port: 8080
#      targetPort: 8080
#      nodePort: 30000


#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: batch-job
#spec:
#  template:
#    spec:
#      restartPolicy: OnFailure
##      initContainers:
##        - name: init-db
##          image: mysql:5.6
##          command: [ 'sh', '-c', 'mysql -h $DB_SERVER -u$DB_USERNAME -p$DB_PASSWORD $DB_NAME < /scripts/schema.sql' ]
###          command: ["sh", "-c", "echo DB_SERVER=$DB_SERVER DB_USERNAME=$DB_USERNAME DB_PASSWORD=$DB_PASSWORD DB_NAME=$DB_NAME && sleep 300"]
##          env:
##            - name: DB_SERVER
##              valueFrom:
##                configMapKeyRef:
##                  name: mysql-config-map
##                  key: mysql-server
##            - name: DB_USERNAME
##              valueFrom:
##                configMapKeyRef:
##                  name: mysql-config-map
##                  key: mysql-user-username
##            - name: DB_PASSWORD
##              valueFrom:
##                secretKeyRef:
##                  name: mysql-pass
##                  key: mysql-user-password
##            - name: DB_NAME
##              valueFrom:
##                configMapKeyRef:
##                  name: mysql-config-map
##                  key: mysql-database-name
##          volumeMounts:
##            - name: init-sql-volume
##              mountPath: /scripts
##              readOnly: true
#      containers:
#        - name: demo-app-spring
#          image:  ${IMAGE}
##          image: 557690581666.dkr.ecr.eu-west-1.amazonaws.com/spring-batch-eks:latest
#          imagePullPolicy: IfNotPresent
#          env:
#            - name: SPRING_DATASOURCE_URL
##              value: jdbc:mysql://$(DB_SERVER):3306/$(DB_NAME)?useSSL=false&allowPublicKeyRetrieval=true
#              value: jdbc:mysql://demo-app-mysql.default.svc.cluster.local:3306/batch_process?useSSL=false&allowPublicKeyRetrieval=true
##            - name: DB_PASSWORD
##              valueFrom:
##                secretKeyRef:
##                  name: mysql-pass
##                  key: mysql-user-password
#            - name: SPRING_DATASOURCE_USERNAME
#              valueFrom:
#                configMapKeyRef:
#                  name: mysql-config-map
#                  key: mysql-user-username
#            - name: SPRING_DATASOURCE_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: mysql-pass
#                  key: mysql-user-password
##            - name: DB_SERVER
##              valueFrom:
##                configMapKeyRef:
##                  name:  mysql-config-map
##                  key: mysql-server
##            - name: DB_NAME
##              valueFrom:
##                configMapKeyRef:
##                  name:  mysql-config-map
##                  key: mysql-database-name
##            - name: DB_USERNAME
##              valueFrom:
##                configMapKeyRef:
##                  name: mysql-config-map
##                  key: mysql-user-username
##      volumes:
##        - name: init-sql-volume
##          configMap:
##            name: init-sql-script


apiVersion: batch/v1
kind: CronJob
metadata:
  name: batch-job
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: demo-app-spring
              image: ${IMAGE}
              imagePullPolicy: IfNotPresent
              env:
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://demo-app-mysql.default.svc.cluster.local:3306/batch_process?useSSL=false&allowPublicKeyRetrieval=true
                - name: SPRING_DATASOURCE_USERNAME
                  valueFrom:
                    configMapKeyRef:
                      name: mysql-config-map
                      key: mysql-user-username
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mysql-pass
                      key: mysql-user-password
                - name: PUSHGATEWAY_URL
                  value: "http://pg-prometheus-pushgateway.monitoring.svc:9091"
                - name: METRICS_JOB_NAME
                  value: "spring-batch"
                    # Wrap the app run + push in a shell script
              command: [ "/bin/sh","-c" ]
              args:
                - |
                  set -eu
                  start=$(date +%s)
                  
                  echo ">> Starting Spring Batch job at $(date)"
                  # --- Run your Spring Batch app ---
                  # If your image runs the app by default, you can just call "exec" without args.
                  # If you normally do 'java -jar app.jar', put that here instead:
                  if [ -x "/entrypoint.sh" ]; then
                    /entrypoint.sh || true
                  elif command -v java >/dev/null 2>&1 && ls *.jar >/dev/null 2>&1; then
                    java -jar *.jar || true
                  else
                    # Fallback: use the image's default command if any
                    echo "No explicit run command provided; attempting to run container's default CMD..."
                  fi
                  
                  status=$?  # capture app exit code but continue
                  end=$(date +%s)
                  duration=$((end - start))
                  
                  # Prepare metrics
                  cat <<EOF >/tmp/metrics.prom
                  # TYPE batch_runs_total counter
                  batch_runs_total{job="${METRICS_JOB_NAME}",exit_code="${status}"} 1
                  # TYPE batch_duration_seconds gauge
                  batch_duration_seconds{job="${METRICS_JOB_NAME}",exit_code="${status}"} ${duration}
                  EOF
                  
                  # Push with unique instance label (pod hostname)
                  if command -v curl >/dev/null 2>&1; then
                    curl -s --data-binary @/tmp/metrics.prom \
                      ${PUSHGATEWAY_URL}/metrics/job/${METRICS_JOB_NAME}/instance/$HOSTNAME
                    echo ">> Pushed metrics to ${PUSHGATEWAY_URL}"
                  else
                    echo "!! curl not found; metrics not pushed"
                  fi
                  
                  # Exit with the app's status so Kubernetes marks job success/failure correctly
                  exit ${status}